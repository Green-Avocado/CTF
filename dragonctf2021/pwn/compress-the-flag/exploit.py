#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host compresstheflag.hackable.software --port 1337
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'compresstheflag.hackable.software'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port, level='error')
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

import random

FLAG_PREFIX = 6
FLAG_LEN = 25
seeds = []

for i in range(FLAG_LEN - FLAG_PREFIX - 1):
    seed = 0

    while True:
        placeholder = list("DrgnS{") + list(range(FLAG_LEN - FLAG_PREFIX - 1)) + ['}']
        random.seed(seed)
        random.shuffle(placeholder)
        if placeholder[0] == i:
            seeds.append(seed)
            break
        seed += 1

flag = "DrgnS{"

for seed in seeds:
    letter = ord('A')
    lengths = []

    while letter <= ord('Z'):
        log.info("TRYING " + chr(letter))

        io = start()
        string = chr(letter) * 4
        io.sendlineafter(b'Note: Flag has format DrgnS{[A-Z]+}\n', f"{seed}:{string}".encode())
        io.recvuntil(b'zlib   ')
        length = int(io.recvline().strip())
        io.close()

        letter += 1
        lengths.append(length)

    log.info("zlib lengths: " + str(lengths))

    letter = ord('A') + lengths.index(min(lengths))
    flag += chr(letter)
    log.success(chr(letter))

flag += '}'

log.success(flag)

